name: Build, Test & Deploy

on:
  push:
    branches:
    - dev

env:
  FUNCTIONAPP_PATH: 'src/YouTubeWebSubSubscriptionHandler.FunctionApp'

jobs:
  arm_template_build_test_deploy_dev:
    name: 'DEV: ARM Templates Build, Test & Deploy'

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: Run Bicep build
      uses: aliencube/bicep-build-actions@v0.1
      with:
        files: '**/*.bicep'

    - name: Run ARM TTK
      uses: aliencube/arm-ttk-actions@v0.3
      id: armtest
      with:
        path: ./resources

    - name: Show ARM TTK test result
      shell: bash
      continue-on-error: true
      run: |
        echo 'Results: ${{ toJSON(fromJSON(steps.armtest.outputs.results)) }}'

    - name: Deploy ARM templates
      id: arm
      uses: Azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        deploymentName: 'ytwebsub'
        template: 'resources/azuredeploy.json'
        parameters: name=${{ secrets.RESOURCE_NAME }} env=${{ secrets.RESOURCE_ENVIRONMENT_DEV }} locationCode=${{ secrets.RESOURCE_LOCATION_CODE }} functionAppEnvironment=${{ secrets.RESOURCE_FUNCTIONAPP_ENVIRONMENT_DEV }} youtubeApiKey=${{ secrets.YOUTUBE_API_KEY_DEV }} youtubeFetchParts=${{ secrets.YOUTUBE_API_FETCH_PARTS }}

    - name: Set EventGrid name
      shell: bash
      run: |
        echo ${{ steps.arm.outputs.eventgridName }} > eventgrid_name_dev.txt

    - name: Upload EventGrid name
      uses: actions/upload-artifact@v2
      with:
        name: eventgrid_name_dev
        path: eventgrid_name_dev.txt

  functionapp_build_test_deploy_dev:
    name: 'DEV: FunctionApp Build, Test & Deploy'
    needs:
    - arm_template_build_test_deploy_dev

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repo
      uses: actions/checkout@v2

    - name: Login to Azure
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore .

    - name: Build solution
      shell: bash
      run: |
        dotnet build . -c Release

    - name: Test solution
      shell: bash
      run: |
        dotnet test . -c Release

    - name: Create FunctionApp artifact
      shell: bash
      run: |
        dotnet publish ${{ env.FUNCTIONAPP_PATH }} -c Release -o published

    - name: Get FunctionApp publish profile
      id: publishprofile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      with:
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}

    - name: Deploy FunctionApp
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        package: published
        publish-profile: ${{ steps.publishprofile.outputs.profile }}

    - name: Reset FunctionApp publish profile
      uses: aliencube/publish-profile-actions@v1
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_DEV }}
      with:
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        appName: ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }}
        reset: true

    - name: Update FunctionApp settings
      uses: azure/CLI@v1
      with:
        inlineScript: |
          settings=$(az functionapp config appsettings set \
            -g ${{ secrets.RESOURCE_GROUP_NAME_DEV }} \
            -n ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }} \
            --settings WebSub__CallbackKey=$(az functionapp function keys list \
              -g ${{ secrets.RESOURCE_GROUP_NAME_DEV }} \
              -n ${{ secrets.RESOURCE_FUNCTIONAPP_NAME_DEV }} \
              --function-name ${{ secrets.RESOURCE_FUNCTION_NAME_CALLBACK }} \
              --query "default" \
              -o tsv))

    - name: Run Bicep build
      uses: aliencube/bicep-build-actions@v0.1
      with:
        files: '**/*.bicep'

    - name: Deploy LogicApp for scheduled subscription to WebSub
      id: logappWebSub
      uses: Azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        deploymentName: 'ytwebsub'
        template: 'resources/logappdeploy.subscription.json'
        parameters: name=${{ secrets.RESOURCE_NAME }} env=${{ secrets.RESOURCE_ENVIRONMENT_DEV }} locationCode=${{ secrets.RESOURCE_LOCATION_CODE }} logicAppSubscriptionTopicUri=${{ secrets.YOUTUBE_TOPIC_URL_DEV }}

    - name: Deploy LogicApp as EventGrid subscription handler
      id: logappEventGridSub
      uses: Azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.SUBSCRIPTION_ID_DEV }}
        resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME_DEV }}
        deploymentName: 'ytwebsub'
        template: 'resources/logappdeploy.eventgridhandler-twitter.azpls.json'
        parameters: name=${{ secrets.RESOURCE_NAME }} env=${{ secrets.RESOURCE_ENVIRONMENT_DEV }} locationCode=${{ secrets.RESOURCE_LOCATION_CODE }}

    - name: Download EventGrid name
      uses: actions/download-artifact@v2
      with:
        name: eventgrid_name_dev

    - name: Get EventGrid name
      id: eventgrid
      shell: bash
      run: |
        name=$(cat eventgrid_name_dev.txt)
        echo "::set-output name=name::$name"

    - name: Provision EventGrid subscription
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az extension add -n eventgrid
          az extension add -n logic
          sub=az eventgrid event-subscription create \
            -n ${{ steps.eventgrid.outputs.name }}-sub \
            --source-resource-id $(az eventgrid topic show \
              -g ${{ secrets.RESOURCE_GROUP_NAME_DEV }} \
              -n ${{ steps.eventgrid.outputs.name }}-topic \
              --query "id" -o tsv) \
            --event-delivery-schema cloudeventschemav1_0 \
            --endpoint-type webhook \
            --endpoint $(az rest \
              -m POST \
              -u "https://management.azure.com$(az logic workflow show \
                -g ${{ secrets.RESOURCE_GROUP_NAME_DEV }} \
                -n ${{ steps.logappEventGridSub.outputs.logicAppName }} \
                --query "id" -o tsv)/triggers/manual/listCallbackUrl?api-version=2016-06-01" \
              --query "value" -o tsv)
